"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment */
//@ts-ignore
const elm_esm_1 = require("elm-esm");
//@ts-ignore
const node_elm_compiler_1 = __importDefault(require("node-elm-compiler"));
const path_1 = require("path");
const assetsInjector_1 = require("./assetsInjector");
const hmrInjector_1 = require("./hmrInjector");
const mutex_1 = require("./mutex");
/* eslint-enable @typescript-eslint/ban-ts-comment */
const trimDebugMessage = (code) => code.replace(/(console\.warn\('Compiled in DEBUG mode)/, '// $1');
const viteProjectPath = (dependency) => `/${(0, path_1.relative)(process.cwd(), dependency)}`;
const plugin = (opts) => {
    const compilableFiles = new Map();
    const debug = opts === null || opts === void 0 ? void 0 : opts.debug;
    const optimize = opts === null || opts === void 0 ? void 0 : opts.optimize;
    return {
        name: 'vite-plugin-elm',
        enforce: 'pre',
        handleHotUpdate({ file, server, modules }) {
            if (!file.endsWith('.elm'))
                return;
            const modulesToCompile = [];
            compilableFiles.forEach((dependencies, compilableFile) => {
                if (dependencies.has(file)) {
                    const module = server.moduleGraph.getModuleById(compilableFile);
                    if (module)
                        modulesToCompile.push(module);
                }
            });
            if (modulesToCompile.length > 0) {
                server.ws.send({
                    type: 'custom',
                    event: 'hot-update-dependents',
                    data: modulesToCompile.map(({ url }) => url),
                });
                return modulesToCompile;
            }
            else {
                return modules;
            }
        },
        async transform(_code, id) {
            if (!id.endsWith('.elm'))
                return;
            compilableFiles.delete(id);
            const isBuild = process.env.NODE_ENV === 'production';
            const dependencies = await node_elm_compiler_1.default.findAllDependencies(id);
            compilableFiles.set(id, new Set(dependencies));
            const releaseLock = await (0, mutex_1.acquireLock)();
            try {
                const compiled = await node_elm_compiler_1.default.compileToString([id], {
                    output: '.js',
                    optimize: typeof optimize === 'boolean' ? optimize : !debug && isBuild,
                    verbose: isBuild,
                    debug: debug !== null && debug !== void 0 ? debug : !isBuild,
                });
                // Apparently `addWatchFile` may not exist: https://github.com/hmsk/vite-plugin-elm/pull/36
                if (this.addWatchFile) {
                    dependencies.forEach(this.addWatchFile.bind(this));
                }
                const esm = (0, assetsInjector_1.injectAssets)((0, elm_esm_1.toESModule)(compiled));
                return {
                    code: isBuild ? esm : trimDebugMessage((0, hmrInjector_1.injectHMR)(esm, dependencies.map(viteProjectPath))),
                    map: null,
                };
            }
            catch (e) {
                if (e instanceof Error && e.message.includes('-- NO MAIN')) {
                    const message = `${viteProjectPath(id)}: NO MAIN .elm file is requested to transform by vite. Probably, this file is just a depending module`;
                    throw message;
                }
                else {
                    throw e;
                }
            }
            finally {
                releaseLock();
            }
        },
    };
};
exports.plugin = plugin;
exports.default = exports.plugin;
//# sourceMappingURL=index.js.map